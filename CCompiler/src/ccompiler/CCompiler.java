/* CCompiler.java */
/* Generated By:JavaCC: Do not edit this line. CCompiler.java */
package ccompiler;

import utils.abstractcode.FourTermStyle;
import utils.exception.CompileException;
import utils.table.SymbolTable;
import utils.tree.Node;

import java.io.*;

class CCompiler implements CCompilerConstants {
    public static void main(String[] args) {
        try {
            BufferedReader br = new BufferedReader(
                    new InputStreamReader(
                            CCompiler.class.getResourceAsStream("test2.c")));
            StringBuilder buf = new StringBuilder();
            String s;
            while ((s = br.readLine()) != null) {
                buf.append("\n");
                buf.append(s);
            }
            Node root = evaluate(buf.toString());
            root.dump();
            root.tree();
            SymbolTable.SymbolStack.peek().tree();
            FourTermStyle.show();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParseException ex) {
            System.err.println(ex.getMessage());
        } catch (CompileException ex) {
            System.err.println(ex.getMessage());
        }
    }

    public static Node evaluate(String src) throws ParseException, CompileException {
        Reader reader = new StringReader(src);
        return new CCompiler(reader).compilation_unit();
    }

/*****************************************************************/
/*****************************************************************/
    /*****************************************************************/
    final public Node compilation_unit() throws ParseException, CompileException {
        utils.tree.Node root;
        Node node;
        node = stmts();
        jj_consume_token(0);
        root = new Node("root").addChildren(node);
        {
            if ("" != null) return root;
        }
        throw new Error("Missing return statement in function");
    }

    final public Node stmts() throws ParseException, CompileException {
        Node node = new Node("stmts");
        Node tmp;
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case SEMIC:
                case LBR:
                case LCBR:
                case PLUS:
                case MINUS:
                case INC:
                case DEC:
                case EXLM:
                case BOOL:
                case DO:
                case IF:
                case INT:
                case FLOAT:
                case DOUBLE:
                case RETURN:
                case STRING:
                case VOID:
                case CHAR:
                case WHILE:
                case IDENTIFIER:
                case INT_VALUE:
                case FLOAT_VALUE:
                case DOUBLE_VALUE:
                case BOOL_VALUE:
                case STRING_VALUE:
                case CHAR_VALUE: {
                    ;
                    break;
                }
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
            }
            tmp = stmt();
            node.setAttributeOnce(Node.StyleId, tmp);
            node.addChildren(tmp);
        }
        {
            if ("" != null) return node.simplify();
        }
        throw new Error("Missing return statement in function");
    }

    final public Node stmt() throws ParseException, CompileException {
        Node node = null;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case SEMIC: {
                jj_consume_token(SEMIC);
                break;
            }
            default:
                jj_la1[1] = jj_gen;
                if (jj_2_1(2)) {
                    node = expr();
                    jj_consume_token(SEMIC);
                } else {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case LCBR: {
                            node = block();
                            break;
                        }
                        case BOOL:
                        case INT:
                        case FLOAT:
                        case DOUBLE:
                        case STRING:
                        case VOID:
                        case CHAR: {
                            node = def_stmt();
                            break;
                        }
                        default:
                            jj_la1[2] = jj_gen;
                            if (jj_2_2(2)) {
                                node = assigns_stmt();
                            } else {
                                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                                    case IF: {
                                        node = if_stmt();
                                        break;
                                    }
                                    case WHILE: {
                                        node = while_stmt();
                                        break;
                                    }
                                    case DO: {
                                        node = dowhile_stmt();
                                        break;
                                    }
                                    case RETURN: {
                                        node = return_stmt();
                                        break;
                                    }
                                    default:
                                        jj_la1[3] = jj_gen;
                                        jj_consume_token(-1);
                                        throw new ParseException();
                                }
                            }
                    }
                }
        }
        if (node != null) {
            {
                if ("" != null) return node;
            }
        } else {
            {
                if ("" != null) return new Node("ndef stmt");
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public Node block() throws ParseException, CompileException {
        Node node;
        jj_consume_token(LCBR);
        SymbolTable.pushSymbolTable("block");
        node = stmts();
        jj_consume_token(RCBR);
        SymbolTable.popSymbolTable();
        {
            if ("" != null) return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Node def_stmt() throws ParseException, CompileException {
        Node node;
        if (jj_2_3(2147483647)) {
            node = def_fun();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case BOOL:
                case INT:
                case FLOAT:
                case DOUBLE:
                case STRING:
                case VOID:
                case CHAR: {
                    node = def_vars();
                    break;
                }
                default:
                    jj_la1[4] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if ("" != null) return node;
        }
        throw new Error("Missing return statement in function");
    }

    // only for main
    final public Node def_fun() throws ParseException, CompileException {
        Node node;
        Node t, id, b;
        t = type();
        id = name();
        jj_consume_token(LBR);
        jj_consume_token(RBR);
        node = new Node("defFun").addChildren(t, id);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case SEMIC: {
                jj_consume_token(SEMIC);
                break;
            }
            case LCBR: {
                b = block();
                node.addChildren(b);
                break;
            }
            default:
                jj_la1[5] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if ("" != null) return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Node return_stmt() throws ParseException, CompileException {
        Node node = new Node("return");
        Node val;
        jj_consume_token(RETURN);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case LBR:
            case PLUS:
            case MINUS:
            case INC:
            case DEC:
            case EXLM:
            case IDENTIFIER:
            case INT_VALUE:
            case FLOAT_VALUE:
            case DOUBLE_VALUE:
            case BOOL_VALUE:
            case STRING_VALUE:
            case CHAR_VALUE: {
                val = expr();
                node.addChildren(val);
                break;
            }
            default:
                jj_la1[6] = jj_gen;
                ;
        }
        jj_consume_token(SEMIC);
        {
            if ("" != null) return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Node type() throws ParseException, CompileException {
        Node node;
        node = typedef_base();
        {
            if ("" != null) return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Node typedef_base() throws ParseException, CompileException {
        Token x;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case VOID: {
                x = jj_consume_token(VOID);
                break;
            }
            case CHAR: {
                x = jj_consume_token(CHAR);
                break;
            }
            case INT: {
                x = jj_consume_token(INT);
                break;
            }
            case FLOAT: {
                x = jj_consume_token(FLOAT);
                break;
            }
            case DOUBLE: {
                x = jj_consume_token(DOUBLE);
                break;
            }
            case BOOL: {
                x = jj_consume_token(BOOL);
                break;
            }
            case STRING: {
                x = jj_consume_token(STRING);
                break;
            }
            default:
                jj_la1[7] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if ("" != null)
                return new Node("type").setAttribute(Node.Type, x.image);
        }
        throw new Error("Missing return statement in function");
    }

    final public Node name() throws ParseException, CompileException {
        Token id;
        id = jj_consume_token(IDENTIFIER);
        {
            if ("" != null) return new Node(Node.Symbol)
                    .setAttribute(Node.Value, id.image);
        }
        throw new Error("Missing return statement in function");
    }

    final public Node def_vars() throws ParseException, CompileException {
        Node node = new Node("defVars");
        Node t, id, val;
        Node temp;
        t = type();
        id = name();
        temp = new Node("defVar").addChildren(t, id);
        SymbolTable.addEntry((String) id.getAttribute(Node.Value), (String) t.getAttribute(Node.Type));
        node.addChildren(temp);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case ASSIGN: {
                jj_consume_token(ASSIGN);
                val = expr();
                id = SymbolTable.getNode_r(id);
                id.typeMatch(val);
                temp.addChildren(val);

                FourTermStyle style = FourTermStyle.addCurrent(
                        FourTermStyle.ASSIGN,
                        val.getAttribute(Node.Value),
                        id.getAttribute(Node.Value));
                node.setAttribute(Node.StyleId, style.getId());
                // 多个赋值语句只赋予第一个的 ID

                break;
            }
            default:
                jj_la1[8] = jj_gen;
                ;
        }
        label_2:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA: {
                    ;
                    break;
                }
                default:
                    jj_la1[9] = jj_gen;
                    break label_2;
            }
            jj_consume_token(COMMA);
            id = name();
            temp = new Node("defVar").addChildren(t, id);
            SymbolTable.addEntry((String) id.getAttribute(Node.Value), (String) t.getAttribute(Node.Type));
            node.addChildren(temp);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case ASSIGN: {
                    jj_consume_token(ASSIGN);
                    val = expr();
                    id = SymbolTable.getNode_r(id);
                    id.typeMatch(val);
                    temp.addChildren(val);

                    FourTermStyle.addCurrent(
                            FourTermStyle.ASSIGN,
                            val.getAttribute(Node.Value),
                            id.getAttribute(Node.Value));
                    break;
                }
                default:
                    jj_la1[10] = jj_gen;
                    ;
            }
        }
        jj_consume_token(SEMIC);
        {
            if ("" != null) return node.simplify();
        }
        throw new Error("Missing return statement in function");
    }

    // TODO may not used
    final public Node number() throws ParseException, CompileException {
        Node node = new Node("terminal");
        Token x;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case INT_VALUE: {
                x = jj_consume_token(INT_VALUE);
                node.setAttribute(Node.Type, "int");
                break;
            }
            case FLOAT_VALUE: {
                x = jj_consume_token(FLOAT_VALUE);
                node.setAttribute(Node.Type, "float");
                break;
            }
            case DOUBLE_VALUE: {
                x = jj_consume_token(DOUBLE_VALUE);
                node.setAttribute(Node.Type, "double");
                break;
            }
            default:
                jj_la1[11] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if ("" != null) return node.setAttribute(Node.Value, x.image);
        }
        throw new Error("Missing return statement in function");
    }

    final public Node terminal() throws ParseException, CompileException {
        Node node = new Node("terminal");
        Token x;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case INT_VALUE: {
                x = jj_consume_token(INT_VALUE);
                node.setAttribute(Node.Type, "int");
                break;
            }
            case FLOAT_VALUE: {
                x = jj_consume_token(FLOAT_VALUE);
                node.setAttribute(Node.Type, "float");
                break;
            }
            case DOUBLE_VALUE: {
                x = jj_consume_token(DOUBLE_VALUE);
                node.setAttribute(Node.Type, "double");
                break;
            }
            case BOOL_VALUE: {
                x = jj_consume_token(BOOL_VALUE);
                node.setAttribute(Node.Type, "bool");
                break;
            }
            case CHAR_VALUE: {
                x = jj_consume_token(CHAR_VALUE);
                node.setAttribute(Node.Type, "char");
                break;
            }
            case STRING_VALUE: {
                x = jj_consume_token(STRING_VALUE);
                node.setAttribute(Node.Type, "string");
                break;
            }
            default:
                jj_la1[12] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if ("" != null)
                return node.setAttribute(Node.Value, Node.TerminalValue + x.image);
        }
        throw new Error("Missing return statement in function");
    }

    final public Node assigns_stmt() throws ParseException, CompileException {
        Node node = new Node("assigns");
        Node id;
        Node val;
        id = name();
        jj_consume_token(ASSIGN);
        val = expr();
        id = SymbolTable.getNode_r(id);
        id.typeMatch(val);
        node.addChildren(new Node("assign").addChildren(id, val));

        FourTermStyle style = FourTermStyle.addCurrent(
                FourTermStyle.ASSIGN,
                val.getAttribute(Node.Value),
                id.getAttribute(Node.Value));
        node.setAttribute(Node.StyleId, style.getId());
        label_3:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA: {
                    ;
                    break;
                }
                default:
                    jj_la1[13] = jj_gen;
                    break label_3;
            }
            jj_consume_token(COMMA);
            id = name();
            jj_consume_token(ASSIGN);
            val = expr();
            id = SymbolTable.getNode_r(id);
            id.typeMatch(val);
            node.addChildren(new Node("assign").addChildren(id, val));

            FourTermStyle.addCurrent(
                    FourTermStyle.ASSIGN,
                    val.getAttribute(Node.Value),
                    id.getAttribute(Node.Value));
        }
        jj_consume_token(SEMIC);
        {
            if ("" != null) return node.simplify();
        }
        throw new Error("Missing return statement in function");
    }

    final public Node expr() throws ParseException, CompileException {
        Node lnode, rnode;
        Node op_node = null;
        Token op;
        lnode = expr1();
        label_4:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LOGIC_OR: {
                    ;
                    break;
                }
                default:
                    jj_la1[14] = jj_gen;
                    break label_4;
            }
            op = jj_consume_token(LOGIC_OR);
            lnode = SymbolTable.getNode_r(lnode);
            lnode.typeMatch("bool");
            if (op_node == null) {
                op_node = new Node(op.image)
                        .setAttribute(Node.Type, "bool")
                        .addChildren(lnode);
            } else {
                op_node = new Node(op.image)
                        .setAttribute(Node.Type, "bool")
                        .addChildren(op_node);
            }
            rnode = expr1();
            rnode = SymbolTable.getNode_r(rnode);
            rnode.typeMatch(lnode);
            op_node.addChildren(rnode);

            String temp = FourTermStyle.newTemp();
            FourTermStyle style = FourTermStyle.addCurrent(
                    op.image,
                    lnode.getAttribute(Node.Value),
                    rnode.getAttribute(Node.Value),
                    temp);
            op_node.setAttribute(Node.Value, temp);
            op_node.setAttribute(Node.StyleId, style.getId());

            lnode = op_node;
        }
        if (op_node == null) {
            {
                if ("" != null) return lnode;
            }
        } else {
            {
                if ("" != null) return op_node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public Node expr1() throws ParseException, CompileException {
        Node lnode, rnode;
        Node op_node = null;
        Token op;
        lnode = expr2();
        label_5:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LOGIC_AND: {
                    ;
                    break;
                }
                default:
                    jj_la1[15] = jj_gen;
                    break label_5;
            }
            op = jj_consume_token(LOGIC_AND);
            lnode = SymbolTable.getNode_r(lnode);
            lnode.typeMatch("bool");
            if (op_node == null) {
                op_node = new Node(op.image)
                        .setAttribute(Node.Type, "bool")
                        .addChildren(lnode);
            } else {
                op_node = new Node(op.image)
                        .setAttribute(Node.Type, "bool")
                        .addChildren(op_node);
            }
            rnode = expr2();
            rnode = SymbolTable.getNode_r(rnode);
            rnode.typeMatch(lnode);
            op_node.addChildren(rnode);

            String temp = FourTermStyle.newTemp();
            FourTermStyle style = FourTermStyle.addCurrent(
                    op.image,
                    lnode.getAttribute(Node.Value),
                    rnode.getAttribute(Node.Value),
                    temp);
            op_node.setAttribute(Node.Value, temp);
            op_node.setAttribute(Node.StyleId, style.getId());

            lnode = op_node;
        }
        if (op_node == null) {
            {
                if ("" != null) return lnode;
            }
        } else {
            {
                if ("" != null) return op_node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public Node expr2() throws ParseException, CompileException {
        Node lnode, rnode;
        Node op_node = null;
        Token op;
        lnode = expr3();
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case LOGIC_EQUAL:
            case LOGIC_NOT:
            case LEFT:
            case RIGHT:
            case LEFT_EQUAL:
            case RIGHT_EQUAL: {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case RIGHT: {
                        op = jj_consume_token(RIGHT);
                        break;
                    }
                    case LEFT: {
                        op = jj_consume_token(LEFT);
                        break;
                    }
                    case RIGHT_EQUAL: {
                        op = jj_consume_token(RIGHT_EQUAL);
                        break;
                    }
                    case LEFT_EQUAL: {
                        op = jj_consume_token(LEFT_EQUAL);
                        break;
                    }
                    case LOGIC_EQUAL: {
                        op = jj_consume_token(LOGIC_EQUAL);
                        break;
                    }
                    case LOGIC_NOT: {
                        op = jj_consume_token(LOGIC_NOT);
                        break;
                    }
                    default:
                        jj_la1[16] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                if (op_node == null) {
                    op_node = new Node(op.image)
                            .setAttribute(Node.Type, "bool")
                            .addChildren(lnode);
                } else {
                    op_node = new Node(op.image)
                            .setAttribute(Node.Type, "bool")
                            .addChildren(op_node);
                }
                rnode = expr3();
                lnode = SymbolTable.getNode_r(lnode);
                rnode = SymbolTable.getNode_r(rnode);
                lnode.typeMatch(rnode);
                op_node.addChildren(rnode);

                String temp = FourTermStyle.newTemp();
                FourTermStyle style = FourTermStyle.addCurrent(
                        op.image,
                        lnode.getAttribute(Node.Value),
                        rnode.getAttribute(Node.Value),
                        temp);
                op_node.setAttribute(Node.Value, temp);
                op_node.setAttribute(Node.StyleId, style.getId());
                break;
            }
            default:
                jj_la1[17] = jj_gen;
                ;
        }
        if (op_node == null) {
            {
                if ("" != null) return lnode;
            }
        } else {
            {
                if ("" != null) return op_node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public Node expr3() throws ParseException, CompileException {
        Node lnode, rnode;
        Node op_node = null;
        Token op;
        lnode = expr4();
        label_6:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case PLUS:
                case MINUS: {
                    ;
                    break;
                }
                default:
                    jj_la1[18] = jj_gen;
                    break label_6;
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case PLUS: {
                    op = jj_consume_token(PLUS);
                    break;
                }
                case MINUS: {
                    op = jj_consume_token(MINUS);
                    break;
                }
                default:
                    jj_la1[19] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            lnode = SymbolTable.getNode_r(lnode);
            lnode.typeMatch(Node.NumberType);
            if (op_node == null) {
                op_node = new Node(op.image)
                        .setAttribute(Node.Type, lnode)
                        .addChildren(lnode);
            } else {
                op_node = new Node(op.image)
                        .setAttribute(Node.Type, lnode)
                        .addChildren(op_node);
            }
            rnode = expr4();
            rnode = SymbolTable.getNode_r(rnode);
            lnode.typeMatch(rnode);
            op_node.addChildren(rnode);

            String temp = FourTermStyle.newTemp();
            FourTermStyle style = FourTermStyle.addCurrent(
                    op.image,
                    lnode.getAttribute(Node.Value),
                    rnode.getAttribute(Node.Value),
                    temp);
            op_node.setAttribute(Node.Value, temp);
            op_node.setAttribute(Node.StyleId, style.getId());

            lnode = op_node;
        }
        if (op_node == null) {
            {
                if ("" != null) return lnode;
            }
        } else {
            {
                if ("" != null) return op_node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public Node expr4() throws ParseException, CompileException {
        Node lnode, rnode;
        Node op_node = null;
        Token op = null;
        lnode = pre_op_const();
        label_7:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case MULT:
                case DIV:
                case MOD: {
                    ;
                    break;
                }
                default:
                    jj_la1[20] = jj_gen;
                    break label_7;
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case MULT: {
                    op = jj_consume_token(MULT);
                    break;
                }
                case DIV: {
                    op = jj_consume_token(DIV);
                    break;
                }
                case MOD: {
                    op = jj_consume_token(MOD);
                    break;
                }
                default:
                    jj_la1[21] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            lnode = SymbolTable.getNode_r(lnode);
            lnode.typeMatch(Node.NumberType);
            if (op_node == null) {
                op_node = new Node(op.image)
                        .setAttribute(Node.Type, lnode)
                        .addChildren(lnode);
            } else {
                op_node = new Node(op.image)
                        .setAttribute(Node.Type, lnode)
                        .addChildren(op_node);
            }
            rnode = pre_op_const();
            rnode = SymbolTable.getNode_r(rnode);
            lnode.typeMatch(rnode);
            op_node.addChildren(rnode);

            String temp = FourTermStyle.newTemp();
            FourTermStyle style = FourTermStyle.addCurrent(
                    op.image,
                    lnode.getAttribute(Node.Value),
                    rnode.getAttribute(Node.Value),
                    temp);
            op_node.setAttribute(Node.Value, temp);
            op_node.setAttribute(Node.StyleId, style.getId());

            lnode = op_node;
        }
        if (op_node == null) {
            {
                if ("" != null) return lnode;
            }
        } else {
            {
                if ("" != null) return op_node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public Node pre_op_const() throws ParseException, CompileException {
        Node node;
        Token op = null;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case PLUS: {
                op = jj_consume_token(PLUS);
                node = term();
                node = SymbolTable.getNode_r(node);
                node.typeMatch(Node.NumberType);
                break;
            }
            case MINUS: {
                op = jj_consume_token(MINUS);
                node = term();
                node = SymbolTable.getNode_r(node);
                node.typeMatch(Node.NumberType);
                break;
            }
            case EXLM: {
                op = jj_consume_token(EXLM);
                node = term();
                node = SymbolTable.getNode_r(node);
                node.typeMatch("bool");
                break;
            }
            case LBR:
            case INC:
            case DEC:
            case IDENTIFIER:
            case INT_VALUE:
            case FLOAT_VALUE:
            case DOUBLE_VALUE:
            case BOOL_VALUE:
            case STRING_VALUE:
            case CHAR_VALUE: {
                node = pre_op();
                {
                    if ("" != null) return node;
                }
                break;
            }
            default:
                jj_la1[22] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        String temp = FourTermStyle.newTemp();
        FourTermStyle style = FourTermStyle.addCurrent(
                op.image,
                node.getAttribute(Node.Value),
                temp);
        {
            if ("" != null) return new Node(op.image)
                    .addChildren(node)
                    .setAttribute(Node.Type, node)
                    .setAttribute(Node.Value, temp)
                    .setAttribute(Node.StyleId, style.getId());
        }
        throw new Error("Missing return statement in function");
    }

    final public Node pre_op() throws ParseException, CompileException {
        Node node;
        Token op = null;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case INC: {
                op = jj_consume_token(INC);
                node = name();
                node = SymbolTable.getNode_r(node);
                node.typeMatch("int");
                break;
            }
            case DEC: {
                op = jj_consume_token(DEC);
                node = name();
                node = SymbolTable.getNode_r(node);
                node.typeMatch("int");
                break;
            }
            case LBR:
            case IDENTIFIER:
            case INT_VALUE:
            case FLOAT_VALUE:
            case DOUBLE_VALUE:
            case BOOL_VALUE:
            case STRING_VALUE:
            case CHAR_VALUE: {
                node = post_op();
                {
                    if ("" != null) return node;
                }
                break;
            }
            default:
                jj_la1[23] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        FourTermStyle style = FourTermStyle.addCurrent(
                op.image,
                node.getAttribute(Node.Value));
        // 前置运算符返回的是改变之后的值
        {
            if ("" != null) return new Node(op.image)
                    .addChildren(node)
                    .setAttribute(Node.Type, node)
                    .setAttribute(Node.Value, node)
                    .setAttribute(Node.StyleId, style.getId());
        }
        throw new Error("Missing return statement in function");
    }

    final public Node post_op() throws ParseException, CompileException {
        Node node;
        Token op = null;
        if (jj_2_4(2147483647)) {
            node = name();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case INC: {
                    op = jj_consume_token(INC);
                    break;
                }
                case DEC: {
                    op = jj_consume_token(DEC);
                    break;
                }
                default:
                    jj_la1[24] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            node = SymbolTable.getNode_r(node);
            node.typeMatch("int");
            // TODO 后置运算返回的还是改变之后的值
            FourTermStyle style = FourTermStyle.addCurrent(
                    op.image,
                    node.getAttribute(Node.Value));
            {
                if ("" != null) return new Node("postOp")
                        .addChildren(node, new Node(op.image))
                        .setAttribute(Node.Type, node)
                        .setAttribute(Node.Value, node)
                        .setAttribute(Node.StyleId, style.getId());
            }
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LBR:
                case IDENTIFIER:
                case INT_VALUE:
                case FLOAT_VALUE:
                case DOUBLE_VALUE:
                case BOOL_VALUE:
                case STRING_VALUE:
                case CHAR_VALUE: {
                    node = term();
                    {
                        if ("" != null) return node;
                    }
                    break;
                }
                default:
                    jj_la1[25] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public Node term() throws ParseException, CompileException {
        Node node;
        Node temp;
        if (jj_2_5(2147483647)) {
            jj_consume_token(LBR);
            temp = type();
            node = new Node("cast");
            node.setAttribute(Node.Type, temp);
            node.addChildren(temp);
            jj_consume_token(RBR);
            temp = term();
            node.addChildren(temp);
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LBR: {
                    jj_consume_token(LBR);
                    node = expr();
                    jj_consume_token(RBR);
                    break;
                }
                case INT_VALUE:
                case FLOAT_VALUE:
                case DOUBLE_VALUE:
                case BOOL_VALUE:
                case STRING_VALUE:
                case CHAR_VALUE: {
                    node = terminal();
                    break;
                }
                case IDENTIFIER: {
                    node = name();
                    break;
                }
                default:
                    jj_la1[26] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if ("" != null) return SymbolTable.getNode_r(node);
        }
        throw new Error("Missing return statement in function");
    }

    final public Node if_stmt() throws ParseException, CompileException {
        Node cond;
        Node if_node;
        Node else_node = null;
        FourTermStyle if_style;
        FourTermStyle else_style;
        jj_consume_token(IF);
        jj_consume_token(LBR);
        cond = expr();
        jj_consume_token(RBR);
        cond.typeMatch("bool");
        if_style = FourTermStyle.addCurrentJmp(
                cond.getAttribute(Node.Value)
        );
        else_style = FourTermStyle.addCurrentJmp();
        if (jj_2_6(2147483647)) {
            if_node = block();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case SEMIC:
                case LBR:
                case LCBR:
                case PLUS:
                case MINUS:
                case INC:
                case DEC:
                case EXLM:
                case BOOL:
                case DO:
                case IF:
                case INT:
                case FLOAT:
                case DOUBLE:
                case RETURN:
                case STRING:
                case VOID:
                case CHAR:
                case WHILE:
                case IDENTIFIER:
                case INT_VALUE:
                case FLOAT_VALUE:
                case DOUBLE_VALUE:
                case BOOL_VALUE:
                case STRING_VALUE:
                case CHAR_VALUE: {
                    if_node = stmt();
                    break;
                }
                default:
                    jj_la1[27] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        if_style.backpatchResult(if_node.getAttribute(Node.StyleId));
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case ELSE: {
                jj_consume_token(ELSE);
                if (jj_2_7(2147483647)) {
                    else_node = block();
                } else {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case SEMIC:
                        case LBR:
                        case LCBR:
                        case PLUS:
                        case MINUS:
                        case INC:
                        case DEC:
                        case EXLM:
                        case BOOL:
                        case DO:
                        case IF:
                        case INT:
                        case FLOAT:
                        case DOUBLE:
                        case RETURN:
                        case STRING:
                        case VOID:
                        case CHAR:
                        case WHILE:
                        case IDENTIFIER:
                        case INT_VALUE:
                        case FLOAT_VALUE:
                        case DOUBLE_VALUE:
                        case BOOL_VALUE:
                        case STRING_VALUE:
                        case CHAR_VALUE: {
                            else_node = stmt();
                            break;
                        }
                        default:
                            jj_la1[28] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                else_style.backpatchResult(else_node.getAttribute(Node.StyleId));
                break;
            }
            default:
                jj_la1[29] = jj_gen;
                ;
        }
//        only first effective backpatch make sense, following is empty if,else case
        if_style.backpatchResult(FourTermStyle.nextId());
        else_style.backpatchResult(FourTermStyle.nextId());
        {
            if ("" != null)
                return new Node("if").addChildren(cond, if_node, else_node);
        }
        throw new Error("Missing return statement in function");
    }

    final public Node while_stmt() throws ParseException, CompileException {
        Node cond;
        Node while_node;
        FourTermStyle in_style;
        FourTermStyle out_style;
        jj_consume_token(WHILE);
        jj_consume_token(LBR);
        cond = expr();
        jj_consume_token(RBR);
        cond.typeMatch("bool");
        in_style = FourTermStyle.addCurrentJmp(
                cond.getAttribute(Node.Value)
        );
        out_style = FourTermStyle.addCurrentJmp();
        if (jj_2_8(2147483647)) {
            while_node = block();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case SEMIC:
                case LBR:
                case LCBR:
                case PLUS:
                case MINUS:
                case INC:
                case DEC:
                case EXLM:
                case BOOL:
                case DO:
                case IF:
                case INT:
                case FLOAT:
                case DOUBLE:
                case RETURN:
                case STRING:
                case VOID:
                case CHAR:
                case WHILE:
                case IDENTIFIER:
                case INT_VALUE:
                case FLOAT_VALUE:
                case DOUBLE_VALUE:
                case BOOL_VALUE:
                case STRING_VALUE:
                case CHAR_VALUE: {
                    while_node = stmt();
                    break;
                }
                default:
                    jj_la1[30] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        in_style.backpatchResult(while_node.getAttribute(Node.StyleId));
        FourTermStyle while_style = FourTermStyle.addCurrentJmp();
        while_style.backpatchResult(in_style.getId());
//        only first effective backpatch make sense, following is empty while case
        in_style.backpatchResult(while_style.getId());
        out_style.backpatchResult(FourTermStyle.nextId());
        {
            if ("" != null)
                return new Node("while").addChildren(cond, while_node);
        }
        throw new Error("Missing return statement in function");
    }

    final public Node dowhile_stmt() throws ParseException, CompileException {
        Node cond;
        Node dowhile_node;
        jj_consume_token(DO);
        if (jj_2_9(2147483647)) {
            dowhile_node = block();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case SEMIC:
                case LBR:
                case LCBR:
                case PLUS:
                case MINUS:
                case INC:
                case DEC:
                case EXLM:
                case BOOL:
                case DO:
                case IF:
                case INT:
                case FLOAT:
                case DOUBLE:
                case RETURN:
                case STRING:
                case VOID:
                case CHAR:
                case WHILE:
                case IDENTIFIER:
                case INT_VALUE:
                case FLOAT_VALUE:
                case DOUBLE_VALUE:
                case BOOL_VALUE:
                case STRING_VALUE:
                case CHAR_VALUE: {
                    dowhile_node = stmt();
                    break;
                }
                default:
                    jj_la1[31] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        jj_consume_token(WHILE);
        jj_consume_token(LBR);
        cond = expr();
        jj_consume_token(RBR);
        jj_consume_token(SEMIC);
        cond.typeMatch("bool");
        FourTermStyle.addCurrentJmp(
                cond.getAttribute(Node.Value)
        )
                .backpatchResult(dowhile_node.getAttribute(Node.StyleId));
        {
            if ("" != null)
                return new Node("dowhile").addChildren(dowhile_node, cond);
        }
        throw new Error("Missing return statement in function");
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_1());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_2());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_3());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_4());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_5());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_6());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_7());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_8());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_9());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    private boolean jj_3R_29() {
        if (jj_scan_token(LBR)) return true;
        if (jj_3R_10()) return true;
        return false;
    }

    private boolean jj_3R_23() {
        if (jj_scan_token(PLUS)) return true;
        if (jj_3R_27()) return true;
        return false;
    }

    private boolean jj_3R_27() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_29()) {
            jj_scanpos = xsp;
            if (jj_3R_30()) {
                jj_scanpos = xsp;
                if (jj_3R_31()) {
                    jj_scanpos = xsp;
                    if (jj_3R_32()) return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_21() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_23()) {
            jj_scanpos = xsp;
            if (jj_3R_24()) {
                jj_scanpos = xsp;
                if (jj_3R_25()) {
                    jj_scanpos = xsp;
                    if (jj_3R_26()) return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_20() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(17)) {
            jj_scanpos = xsp;
            if (jj_scan_token(18)) return true;
        }
        return false;
    }

    private boolean jj_3R_45() {
        if (jj_3R_27()) return true;
        return false;
    }

    private boolean jj_3_3() {
        if (jj_3R_10()) return true;
        if (jj_3R_11()) return true;
        if (jj_scan_token(LBR)) return true;
        return false;
    }

    private boolean jj_3R_9() {
        if (jj_3R_11()) return true;
        if (jj_scan_token(ASSIGN)) return true;
        return false;
    }

    private boolean jj_3_8() {
        if (jj_scan_token(LCBR)) return true;
        return false;
    }

    private boolean jj_3R_17() {
        if (jj_3R_19()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_20()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_4() {
        if (jj_3R_11()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(22)) {
            jj_scanpos = xsp;
            if (jj_scan_token(23)) return true;
        }
        return false;
    }

    private boolean jj_3R_16() {
        if (jj_scan_token(LOGIC_AND)) return true;
        return false;
    }

    private boolean jj_3R_12() {
        if (jj_3R_15()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_16()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_44() {
        if (jj_3R_11()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(22)) {
            jj_scanpos = xsp;
            if (jj_scan_token(23)) return true;
        }
        return false;
    }

    private boolean jj_3R_43() {
        if (jj_scan_token(STRING_VALUE)) return true;
        return false;
    }

    private boolean jj_3R_37() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_44()) {
            jj_scanpos = xsp;
            if (jj_3R_45()) return true;
        }
        return false;
    }

    private boolean jj_3R_42() {
        if (jj_scan_token(CHAR_VALUE)) return true;
        return false;
    }

    private boolean jj_3R_41() {
        if (jj_scan_token(BOOL_VALUE)) return true;
        return false;
    }

    private boolean jj_3R_40() {
        if (jj_scan_token(DOUBLE_VALUE)) return true;
        return false;
    }

    private boolean jj_3_7() {
        if (jj_scan_token(LCBR)) return true;
        return false;
    }

    private boolean jj_3R_39() {
        if (jj_scan_token(FLOAT_VALUE)) return true;
        return false;
    }

    private boolean jj_3R_11() {
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_38() {
        if (jj_scan_token(INT_VALUE)) return true;
        return false;
    }

    private boolean jj_3R_35() {
        if (jj_3R_37()) return true;
        return false;
    }

    private boolean jj_3_6() {
        if (jj_scan_token(LCBR)) return true;
        return false;
    }

    private boolean jj_3R_36() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_38()) {
            jj_scanpos = xsp;
            if (jj_3R_39()) {
                jj_scanpos = xsp;
                if (jj_3R_40()) {
                    jj_scanpos = xsp;
                    if (jj_3R_41()) {
                        jj_scanpos = xsp;
                        if (jj_3R_42()) {
                            jj_scanpos = xsp;
                            if (jj_3R_43()) return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_22() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(19)) {
            jj_scanpos = xsp;
            if (jj_scan_token(20)) {
                jj_scanpos = xsp;
                if (jj_scan_token(21)) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_34() {
        if (jj_scan_token(DEC)) return true;
        if (jj_3R_11()) return true;
        return false;
    }

    private boolean jj_3R_19() {
        if (jj_3R_21()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_22()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_33() {
        if (jj_scan_token(INC)) return true;
        if (jj_3R_11()) return true;
        return false;
    }

    private boolean jj_3_2() {
        if (jj_3R_9()) return true;
        return false;
    }

    private boolean jj_3R_14() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(42)) {
            jj_scanpos = xsp;
            if (jj_scan_token(43)) {
                jj_scanpos = xsp;
                if (jj_scan_token(37)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(38)) {
                        jj_scanpos = xsp;
                        if (jj_scan_token(39)) {
                            jj_scanpos = xsp;
                            if (jj_scan_token(33)) {
                                jj_scanpos = xsp;
                                if (jj_scan_token(41)) return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_1() {
        if (jj_3R_8()) return true;
        if (jj_scan_token(SEMIC)) return true;
        return false;
    }

    private boolean jj_3R_18() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(30)) {
            jj_scanpos = xsp;
            if (jj_scan_token(29)) {
                jj_scanpos = xsp;
                if (jj_scan_token(32)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(31)) {
                        jj_scanpos = xsp;
                        if (jj_scan_token(25)) {
                            jj_scanpos = xsp;
                            if (jj_scan_token(26)) return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_28() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_33()) {
            jj_scanpos = xsp;
            if (jj_3R_34()) {
                jj_scanpos = xsp;
                if (jj_3R_35()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_13() {
        if (jj_scan_token(LOGIC_OR)) return true;
        return false;
    }

    private boolean jj_3R_15() {
        if (jj_3R_17()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_18()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_10() {
        if (jj_3R_14()) return true;
        return false;
    }

    private boolean jj_3R_8() {
        if (jj_3R_12()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_13()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_32() {
        if (jj_3R_11()) return true;
        return false;
    }

    private boolean jj_3R_26() {
        if (jj_3R_28()) return true;
        return false;
    }

    private boolean jj_3R_31() {
        if (jj_3R_36()) return true;
        return false;
    }

    private boolean jj_3R_30() {
        if (jj_scan_token(LBR)) return true;
        if (jj_3R_8()) return true;
        return false;
    }

    private boolean jj_3_5() {
        if (jj_scan_token(LBR)) return true;
        if (jj_3R_10()) return true;
        return false;
    }

    private boolean jj_3_9() {
        if (jj_scan_token(LCBR)) return true;
        return false;
    }

    private boolean jj_3R_25() {
        if (jj_scan_token(EXLM)) return true;
        if (jj_3R_27()) return true;
        return false;
    }

    private boolean jj_3R_24() {
        if (jj_scan_token(MINUS)) return true;
        if (jj_3R_27()) return true;
        return false;
    }

    /**
     * Generated Token Manager.
     */
    public CCompilerTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[32];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x1c72400, 0x400, 0x10000, 0x0, 0x0, 0x10400, 0x1c62000, 0x0, 0x1000, 0x800, 0x1000, 0x0, 0x0, 0x800, 0x10000000, 0x8000000, 0xe6000000, 0xe6000000, 0x60000, 0x60000, 0x380000, 0x380000, 0x1c62000, 0xc02000, 0xc00000, 0x2000, 0x2000, 0x1c72400, 0x1c72400, 0x0, 0x1c72400, 0x1c72400,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x843fff6, 0x0, 0xee2, 0x1114, 0xee2, 0x0, 0x843e000, 0xee2, 0x0, 0x0, 0x0, 0x1c000, 0x843c000, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x843e000, 0x843e000, 0x0, 0x843e000, 0x843e000, 0x843fff6, 0x843fff6, 0x8, 0x843fff6, 0x843fff6,};
    }

    final private JJCalls[] jj_2_rtns = new JJCalls[9];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /**
     * Constructor with InputStream.
     */
    public CCompiler(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public CCompiler(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new CCompilerTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 32; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 32; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor.
     */
    public CCompiler(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new CCompilerTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 32; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        if (jj_input_stream == null) {
            jj_input_stream = new SimpleCharStream(stream, 1, 1);
        } else {
            jj_input_stream.ReInit(stream, 1, 1);
        }
        if (token_source == null) {
            token_source = new CCompilerTokenManager(jj_input_stream);
        }

        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 32; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor with generated Token Manager.
     */
    public CCompiler(CCompilerTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 32; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(CCompilerTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 32; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
    }

    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }


    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk_f() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) {
            return;
        }

        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];

            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }

            for (int[] oldentry : jj_expentries) {
                if (oldentry.length == jj_expentry.length) {
                    boolean isMatched = true;

                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            isMatched = false;
                            break;
                        }

                    }
                    if (isMatched) {
                        jj_expentries.add(jj_expentry);
                        break;
                    }
                }
            }

            if (pos != 0) {
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
            }
        }
    }

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[61];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 32; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 61; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    private int trace_indent = 0;
    private boolean trace_enabled;

    /**
     * Trace enabled.
     */
    final public boolean trace_enabled() {
        return trace_enabled;
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 9; i++) {
            try {
                JJCalls p = jj_2_rtns[i];

                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3_8();
                                break;
                            case 8:
                                jj_3_9();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);

            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }

        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
