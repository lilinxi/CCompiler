/* TempTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. TempTokenManager.java */
package Try_Demo;
import java.io.*;
import Try_Demo.tree.Node;

/** Token Manager. */
public class TempTokenManager implements TempConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x400001000080L) != 0L)
            return 0;
         if ((active0 & 0xffe0000000000000L) != 0L || (active1 & 0x1fffL) != 0L)
         {
            jjmatchedKind = 77;
            return 7;
         }
         return -1;
      case 1:
         if ((active0 & 0xfb60000000000000L) != 0L || (active1 & 0x1fffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 1;
            }
            return 7;
         }
         if ((active0 & 0x480000000000000L) != 0L)
            return 7;
         return -1;
      case 2:
         if ((active0 & 0xf360000000000000L) != 0L || (active1 & 0x1f7fL) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 2;
            return 7;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x80L) != 0L)
            return 7;
         return -1;
      case 3:
         if ((active0 & 0x3240000000000000L) != 0L || (active1 & 0x1d3aL) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 3;
            return 7;
         }
         if ((active0 & 0xc120000000000000L) != 0L || (active1 & 0x245L) != 0L)
            return 7;
         return -1;
      case 4:
         if ((active0 & 0x3000000000000000L) != 0L || (active1 & 0x1530L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 4;
            return 7;
         }
         if ((active0 & 0x240000000000000L) != 0L || (active1 & 0x80aL) != 0L)
            return 7;
         return -1;
      case 5:
         if ((active1 & 0x1410L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
            return 7;
         }
         if ((active0 & 0x3000000000000000L) != 0L || (active1 & 0x120L) != 0L)
            return 7;
         return -1;
      case 6:
         if ((active1 & 0x410L) != 0L)
            return 7;
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 6;
            return 7;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 34:
         return jjStopAtPos(0, 79);
      case 35:
         return jjStopAtPos(0, 16);
      case 37:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 38:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x1000800000000L, 0x0L);
      case 39:
         return jjStopAtPos(0, 84);
      case 40:
         return jjStopAtPos(0, 17);
      case 41:
         return jjStopAtPos(0, 18);
      case 42:
         jjmatchedKind = 23;
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 43:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x80004000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 11);
      case 45:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0x100008000000L, 0x0L);
      case 46:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 47:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_0(0x400000000080L, 0x0L);
      case 58:
         return jjStopAtPos(0, 12);
      case 59:
         return jjStopAtPos(0, 10);
      case 60:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0x8028000000000L, 0x0L);
      case 61:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 62:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_0(0x10050000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 14);
      case 94:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x800L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x1201L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x420L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x80L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xc00000000000000L, 0x10L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x102L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 123:
         return jjStopAtPos(0, 20);
      case 124:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_0(0x2001000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 19);
      case 126:
         return jjStopAtPos(0, 29);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         break;
      case 42:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 43:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         break;
      case 45:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L);
      case 60:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
      case 61:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         break;
      case 62:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0x420L);
      case 102:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 58, 7);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xbL);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0x10L);
      case 111:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 55, 7);
         return jjMoveStringLiteralDfa2_0(active0, 0x8060000000000000L, active1, 0x10c4L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0x800L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L);
      case 124:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(2, 13);
         break;
      case 61:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 51);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(2, 52);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x420L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x108L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0x1004L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x2L);
      case 114:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 71, 7);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x200L);
      case 116:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 7);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x40L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xc00L);
      case 100:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 7);
         break;
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 7);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 7);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 7);
         break;
      case 103:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 7);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0x20L);
      case 108:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x18L);
      case 111:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 7);
         break;
      case 114:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x240000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1100L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L);
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 7);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 7);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000L);
      case 107:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 7);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0x20L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 7);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 7);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x410L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10L);
      case 101:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 7);
         break;
      case 103:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 7);
         break;
      case 104:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 7);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400L);
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 7);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 7);
         break;
      case 116:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 74, 7);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active1, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(5, 0L, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 76, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 18;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 78)
                        kind = 78;
                     { jjCheckNAddStates(3, 6); }
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddStates(7, 9); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddStates(7, 9); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 12:
                  if (curChar != 48)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjCheckNAddStates(3, 6); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjCheckNAddStates(10, 12); }
                  break;
               case 16:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjCheckNAddStates(13, 15); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAdd(7); }
                  break;
               case 1:
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(7, 9); }
                  break;
               case 10:
               case 15:
               case 17:
                  if (curChar != 85)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjCheckNAdd(11); }
                  break;
               case 11:
                  if (curChar == 76 && kind > 78)
                     kind = 78;
                  break;
               case 13:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(14); }
                  break;
               case 14:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjCheckNAddStates(10, 12); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(7, 9); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 18 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_4(){
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 88);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(0, 0);
}
static private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffff7fffffdbffL & l) != 0L && kind > 85)
                     kind = 85;
                  break;
               case 2:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0xff000000000000L & l) != 0L && kind > 86)
                     kind = 86;
                  break;
               case 5:
                  if (kind > 87)
                     kind = 87;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                  }
                  else if (curChar == 92)
                     { jjAddStates(16, 17); }
                  break;
               case 1:
                  if (curChar == 92)
                     { jjAddStates(16, 17); }
                  break;
               case 5:
                  if (kind > 87)
                     kind = 87;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 85)
                     kind = 85;
                  break;
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 87)
                     kind = 87;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_2(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_2(int pos, long active0, long active1){
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
static private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 83);
      default :
         return jjMoveNfa_2(1, 0);
   }
}
static private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0xfffffffbffffdbffL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  { jjCheckNAdd(0); }
                  break;
               case 2:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0xff000000000000L & l) != 0L && kind > 81)
                     kind = 81;
                  break;
               case 5:
                  if (kind > 82)
                     kind = 82;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                     { jjCheckNAdd(0); }
                  }
                  else if (curChar == 92)
                     { jjAddStates(16, 17); }
                  break;
               case 0:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  { jjCheckNAdd(0); }
                  break;
               case 5:
                  if (kind > 82)
                     kind = 82;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  { jjCheckNAdd(0); }
                  break;
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 82)
                     kind = 82;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x200L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         return 2;
   }
   return 2;
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, "\73", "\54", "\72", 
"\56\56\56", "\77", "\75", "\43", "\50", "\51", "\175", "\173", "\53", "\55", "\52", "\57", 
"\45", "\53\53", "\55\55", "\41", "\176", "\46", "\174", "\136", "\75\75", "\41\75", 
"\46\46", "\174\174", "\74", "\76", "\74\75", "\76\75", "\74\74", "\76\76", "\53\75", 
"\55\75", "\52\75", "\57\75", "\45\75", "\46\75", "\174\75", "\136\75", "\74\74\75", 
"\76\76\75", "\142\157\157\154", "\143\157\156\163\164", "\144\157", "\145\154\163\145", 
"\146\141\154\163\145", "\151\146", "\151\156\164", "\162\145\164\165\162\156", 
"\163\164\162\151\156\147", "\164\162\165\145", "\166\157\151\144", "\143\150\141\162", 
"\163\150\157\162\164", "\154\157\156\147", "\167\150\151\154\145", "\151\156\143\154\165\144\145", 
"\144\145\146\151\156\145", "\147\157\164\157", "\146\157\162", "\163\167\151\164\143\150", 
"\143\141\163\145", "\144\145\146\141\165\154\164", "\142\162\145\141\153", 
"\143\157\156\164\151\156\165\145", null, null, null, null, null, null, null, null, null, null, null, null, null, };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   9, 10, 11, 13, 16, 17, 11, 1, 2, 4, 14, 15, 11, 16, 17, 11, 
   2, 5, 
};

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 89)
         {
            jjmatchedKind = 89;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public TempTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public TempTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  static public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 18; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public static void SwitchTo(int lexState)
  {
    if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_BLOCK_COMMIT",
   "IN_STRING",
   "IN_CHARACTER",
   "CHARACTER_TERM",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, 1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 2, -1, -1, -1, 0, 3, 4, 4, 4, 0, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffc01L, 0x3087fffL, 
};
static final long[] jjtoSkip = {
   0x27eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x240L, 0x0L, 
};
static final long[] jjtoMore = {
   0x180L, 0xf78000L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[18];
    static private final int[] jjstateSet = new int[2 * 18];
    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    static protected int curChar;
}
