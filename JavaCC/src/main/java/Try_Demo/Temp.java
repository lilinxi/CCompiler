/* Temp.java */
/* Generated By:JavaCC: Do not edit this line. Temp.java */
package Try_Demo;
import java.io.*;
import Try_Demo.tree.Node;

class Temp implements TempConstants {
    public static void main(String[] args) {
        try {
            BufferedReader br = new BufferedReader(
                new FileReader(new File("src/main/java/Try_Demo/stmt.c")));
            StringBuilder buf = new StringBuilder();
            String s;
            while ((s = br.readLine()) != null) {
                buf.append("\n");
                buf.append(s);
            }
            Node root=evaluate(buf.toString());
            root.dump();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParseException ex) {
            System.err.println(ex.getMessage());
        }
    }

    public static Node evaluate(String src) throws ParseException {
        Reader reader = new StringReader(src);
        return new Temp(reader).compilation_unit();
    }

/*****************************************************************/
/*****************************************************************/
/*****************************************************************/
  static final public Node compilation_unit() throws ParseException {Node root;
    Node node;
    node = stmts();
    jj_consume_token(0);
root=new Node("root",null,node);
        {if ("" != null) return root;}
    throw new Error("Missing return statement in function");
}

  static final public Node stmts() throws ParseException {Node node=new Node("stmts");
    Node tmp;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMIC:
      case MACRO:
      case LBR:
      case LCBR:
      case PLUS:
      case MINUS:
      case MULT:
      case INC:
      case DEC:
      case EXLM:
      case NOT:
      case AND:
      case BOOL:
      case DO:
      case FALSE:
      case IF:
      case INT:
      case RETURN:
      case TRUE:
      case VOID:
      case CHAR:
      case SHORT:
      case LONG:
      case WHILE:
      case GOTO:
      case FOR:
      case SWITCH:
      case BREAK:
      case CONTINUE:
      case IDENTIFIER:
      case INTEGER:
      case STRING:
      case CHARACTER:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      tmp = stmt();
node.addChildren(tmp);
    }
{if ("" != null) return node.simplify();}
    throw new Error("Missing return statement in function");
}

  static final public Node stmt() throws ParseException {Node node=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMIC:{
      jj_consume_token(SEMIC);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      if (jj_2_1(2)) {
        node = expr();
        jj_consume_token(SEMIC);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LCBR:{
          node = block();
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          if (jj_2_2(2)) {
            node = labeled_stmt();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case MACRO:{
              node = macro_stmt();
              break;
              }
            case BOOL:
            case INT:
            case VOID:
            case CHAR:
            case SHORT:
            case LONG:
            case STRING:{
              node = def_stmt();
              break;
              }
            case GOTO:{
              node = goto_stmt();
              break;
              }
            default:
              jj_la1[3] = jj_gen;
              if (jj_2_3(2)) {
                node = assigns_stmt();
              } else {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case IF:{
                  node = if_stmt();
                  break;
                  }
                case WHILE:{
                  node = while_stmt();
                  break;
                  }
                case DO:{
                  node = dowhile_stmt();
                  break;
                  }
                case FOR:{
                  node = for_stmt();
                  break;
                  }
                case SWITCH:{
                  node = switch_stmt();
                  break;
                  }
                case BREAK:{
                  node = break_stmt();
                  break;
                  }
                case CONTINUE:{
                  node = continue_stmt();
                  break;
                  }
                case RETURN:{
                  node = return_stmt();
                  break;
                  }
                default:
                  jj_la1[4] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            }
          }
        }
      }
    }
if(node!=null){
            {if ("" != null) return node;}
        }else{
            {if ("" != null) return new Node("ndef stmt");}
        }
    throw new Error("Missing return statement in function");
}

  static final public Node macro_stmt() throws ParseException {Node node;
    jj_consume_token(MACRO);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INCLUDE:{
      node = include_stmt();
      break;
      }
    case DEFINE:{
      node = define_stmt();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

  static final public Node include_stmt() throws ParseException {Token x;
    jj_consume_token(INCLUDE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT:{
      jj_consume_token(LEFT);
      x = jj_consume_token(IDENTIFIER);
      jj_consume_token(RIGHT);
      break;
      }
    case STRING:{
      x = jj_consume_token(STRING);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Node("include",x.image);}
    throw new Error("Missing return statement in function");
}

  static final public Node define_stmt() throws ParseException {Token key;
    Token value;
    jj_consume_token(DEFINE);
    key = jj_consume_token(IDENTIFIER);
    value = jj_consume_token(INTEGER);
{if ("" != null) return new Node("define",null,
        new Node("id",key.image),
        new Node("constant",value.image));}
    throw new Error("Missing return statement in function");
}

  static final public Node def_stmt() throws ParseException {Node node;
    if (jj_2_4(2147483647)) {
      node = def_fun();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOL:
      case INT:
      case VOID:
      case CHAR:
      case SHORT:
      case LONG:
      case STRING:{
        node = def_vars();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

  static final public Node type() throws ParseException {Node node;
    node = typedef_base();
{if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

  static final public Node typedef_base() throws ParseException {Token x;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID:{
      x = jj_consume_token(VOID);
      break;
      }
    case CHAR:{
      x = jj_consume_token(CHAR);
      break;
      }
    case SHORT:{
      x = jj_consume_token(SHORT);
      break;
      }
    case INT:{
      x = jj_consume_token(INT);
      break;
      }
    case LONG:{
      x = jj_consume_token(LONG);
      break;
      }
    case BOOL:{
      x = jj_consume_token(BOOL);
      break;
      }
    case STRING:{
      x = jj_consume_token(STRING);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Node("type",x.image);}
    throw new Error("Missing return statement in function");
}

  static final public Node name() throws ParseException {Token x;
    x = jj_consume_token(IDENTIFIER);
{if ("" != null) return new Node("id",x.image);}
    throw new Error("Missing return statement in function");
}

  static final public Node def_fun() throws ParseException {Node node;
    Node t,id,p,b;
    t = type();
    id = name();
    jj_consume_token(LBR);
    p = params();
    jj_consume_token(RBR);
node=new Node("defFun").addChildren(t,id,p);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMIC:{
      jj_consume_token(SEMIC);
      break;
      }
    case LCBR:{
      b = block();
node.addChildren(b);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

  static final public Node params() throws ParseException {Node node=null;
    Token x;
    if (jj_2_5(2147483647)) {
{if ("" != null) return null;}
    } else if (jj_2_6(2147483647)) {
      jj_consume_token(VOID);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOL:
      case INT:
      case VOID:
      case CHAR:
      case SHORT:
      case LONG:
      case STRING:{
        node = fixedparams();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          jj_consume_token(COMMA);
          x = jj_consume_token(ELLIPSIS);
node.addChildren(new Node(x.image));
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

  static final public Node fixedparams() throws ParseException {Node node=new Node("params");
    Node temp;
    temp = param();
node.addChildren(temp);
    label_2:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(COMMA);
      temp = param();
node.addChildren(temp);
    }
{if ("" != null) return node.simplify();}
    throw new Error("Missing return statement in function");
}

  static final public Node param() throws ParseException {Node t,id;
    t = type();
    id = name();
{if ("" != null) return new Node("param",null,t,id);}
    throw new Error("Missing return statement in function");
}

  static final public Node block() throws ParseException {Node node;
    jj_consume_token(LCBR);
    node = stmts();
    jj_consume_token(RCBR);
{if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

  static final public Node def_vars() throws ParseException {Node node=new Node("defVars");
    Node t,id,val;
    Node temp;
    t = type();
    id = name();
temp=new Node("defVar").addChildren(t,id);
        node.addChildren(temp);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      val = expr();
temp.addChildren(val);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      id = name();
temp=new Node("defVar").addChildren(t,id);
            node.addChildren(temp);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        val = expr();
temp.addChildren(val);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    }
    jj_consume_token(SEMIC);
{if ("" != null) return node.simplify();}
    throw new Error("Missing return statement in function");
}

  static final public Node labeled_stmt() throws ParseException {Token label;
    label = jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
{if ("" != null) return new Node("label",label.image);}
    throw new Error("Missing return statement in function");
}

  static final public Node goto_stmt() throws ParseException {Token label;
    jj_consume_token(GOTO);
    label = jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
{if ("" != null) return new Node("goto",label.image);}
    throw new Error("Missing return statement in function");
}

  static final public Node assigns_stmt() throws ParseException {Node node=new Node("assigns");
    Node id;
    Node val;
    id = name();
    jj_consume_token(ASSIGN);
    val = expr();
node.addChildren(new Node("assign",null,id,val));
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      id = name();
      jj_consume_token(ASSIGN);
      val = expr();
node.addChildren(new Node("assign",null,id,val));
    }
    jj_consume_token(SEMIC);
{if ("" != null) return node.simplify();}
    throw new Error("Missing return statement in function");
}

  static final public Node if_stmt() throws ParseException {Node cond;
    Node if_node;
    Node else_node=null;
    jj_consume_token(IF);
    jj_consume_token(LBR);
    cond = expr();
    jj_consume_token(RBR);
    if (jj_2_8(2147483647)) {
      if_node = block();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMIC:
      case MACRO:
      case LBR:
      case LCBR:
      case PLUS:
      case MINUS:
      case MULT:
      case INC:
      case DEC:
      case EXLM:
      case NOT:
      case AND:
      case BOOL:
      case DO:
      case FALSE:
      case IF:
      case INT:
      case RETURN:
      case TRUE:
      case VOID:
      case CHAR:
      case SHORT:
      case LONG:
      case WHILE:
      case GOTO:
      case FOR:
      case SWITCH:
      case BREAK:
      case CONTINUE:
      case IDENTIFIER:
      case INTEGER:
      case STRING:
      case CHARACTER:{
        if_node = stmt();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      if (jj_2_9(2147483647)) {
        else_node = block();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SEMIC:
        case MACRO:
        case LBR:
        case LCBR:
        case PLUS:
        case MINUS:
        case MULT:
        case INC:
        case DEC:
        case EXLM:
        case NOT:
        case AND:
        case BOOL:
        case DO:
        case FALSE:
        case IF:
        case INT:
        case RETURN:
        case TRUE:
        case VOID:
        case CHAR:
        case SHORT:
        case LONG:
        case WHILE:
        case GOTO:
        case FOR:
        case SWITCH:
        case BREAK:
        case CONTINUE:
        case IDENTIFIER:
        case INTEGER:
        case STRING:
        case CHARACTER:{
          else_node = stmt();
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
{if ("" != null) return new Node("if").addChildren(cond,if_node,else_node);}
    throw new Error("Missing return statement in function");
}

  static final public Node while_stmt() throws ParseException {Node cond;
    Node stmts_node;
    jj_consume_token(WHILE);
    jj_consume_token(LBR);
    cond = expr();
    jj_consume_token(RBR);
    if (jj_2_10(2147483647)) {
      stmts_node = block();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMIC:
      case MACRO:
      case LBR:
      case LCBR:
      case PLUS:
      case MINUS:
      case MULT:
      case INC:
      case DEC:
      case EXLM:
      case NOT:
      case AND:
      case BOOL:
      case DO:
      case FALSE:
      case IF:
      case INT:
      case RETURN:
      case TRUE:
      case VOID:
      case CHAR:
      case SHORT:
      case LONG:
      case WHILE:
      case GOTO:
      case FOR:
      case SWITCH:
      case BREAK:
      case CONTINUE:
      case IDENTIFIER:
      case INTEGER:
      case STRING:
      case CHARACTER:{
        stmts_node = stmt();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return new Node("while").addChildren(cond,stmts_node);}
    throw new Error("Missing return statement in function");
}

  static final public Node dowhile_stmt() throws ParseException {Node cond;
    Node stmts_node;
    jj_consume_token(DO);
    if (jj_2_11(2147483647)) {
      stmts_node = block();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMIC:
      case MACRO:
      case LBR:
      case LCBR:
      case PLUS:
      case MINUS:
      case MULT:
      case INC:
      case DEC:
      case EXLM:
      case NOT:
      case AND:
      case BOOL:
      case DO:
      case FALSE:
      case IF:
      case INT:
      case RETURN:
      case TRUE:
      case VOID:
      case CHAR:
      case SHORT:
      case LONG:
      case WHILE:
      case GOTO:
      case FOR:
      case SWITCH:
      case BREAK:
      case CONTINUE:
      case IDENTIFIER:
      case INTEGER:
      case STRING:
      case CHARACTER:{
        stmts_node = stmt();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(WHILE);
    jj_consume_token(LBR);
    cond = expr();
    jj_consume_token(RBR);
    jj_consume_token(SEMIC);
{if ("" != null) return new Node("dowhile").addChildren(stmts_node,cond);}
    throw new Error("Missing return statement in function");
}

  static final public Node for_stmt() throws ParseException {Node for_0=Node.NullNode;
    Node for_1=Node.NullNode;
    Node for_2=Node.NullNode;
    Node stmts_node;
    jj_consume_token(FOR);
    jj_consume_token(LBR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOL:
    case INT:
    case VOID:
    case CHAR:
    case SHORT:
    case LONG:
    case STRING:{
      for_0 = def_vars();
      break;
      }
    case IDENTIFIER:{
      for_0 = assigns_stmt();
      break;
      }
    case SEMIC:{
      jj_consume_token(SEMIC);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBR:
    case PLUS:
    case MINUS:
    case MULT:
    case INC:
    case DEC:
    case EXLM:
    case NOT:
    case AND:
    case FALSE:
    case TRUE:
    case IDENTIFIER:
    case INTEGER:
    case STRING:
    case CHARACTER:{
      for_1 = expr();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(SEMIC);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBR:
    case PLUS:
    case MINUS:
    case MULT:
    case INC:
    case DEC:
    case EXLM:
    case NOT:
    case AND:
    case FALSE:
    case TRUE:
    case IDENTIFIER:
    case INTEGER:
    case STRING:
    case CHARACTER:{
      for_2 = expr();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(RBR);
    if (jj_2_12(2147483647)) {
      stmts_node = block();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMIC:
      case MACRO:
      case LBR:
      case LCBR:
      case PLUS:
      case MINUS:
      case MULT:
      case INC:
      case DEC:
      case EXLM:
      case NOT:
      case AND:
      case BOOL:
      case DO:
      case FALSE:
      case IF:
      case INT:
      case RETURN:
      case TRUE:
      case VOID:
      case CHAR:
      case SHORT:
      case LONG:
      case WHILE:
      case GOTO:
      case FOR:
      case SWITCH:
      case BREAK:
      case CONTINUE:
      case IDENTIFIER:
      case INTEGER:
      case STRING:
      case CHARACTER:{
        stmts_node = stmt();
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return new Node("for").addChildren(for_0,for_1,for_2,stmts_node);}
    throw new Error("Missing return statement in function");
}

  static final public Node switch_stmt() throws ParseException {Node node=new Node("switch");
    Node temp;
    jj_consume_token(SWITCH);
    jj_consume_token(LBR);
    temp = name();
    jj_consume_token(RBR);
    jj_consume_token(LCBR);
node.addChildren(temp);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASE:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_5;
      }
      temp = switch_case();
node.addChildren(temp);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CASE_DEFAULT:{
      temp = default_case();
node.addChildren(temp);
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(RCBR);
{if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

  static final public Node switch_case() throws ParseException {Node cond;
    Node stmts_node;
    jj_consume_token(CASE);
    cond = constant();
    jj_consume_token(COLON);
    stmts_node = stmts();
{if ("" != null) return new Node("case").addChildren(cond,stmts_node);}
    throw new Error("Missing return statement in function");
}

  static final public Node default_case() throws ParseException {Node node;
    jj_consume_token(CASE_DEFAULT);
    jj_consume_token(COLON);
    node = stmts();
{if ("" != null) return new Node("default").addChildren(node);}
    throw new Error("Missing return statement in function");
}

  static final public Node constant() throws ParseException {Node node;
    Token x;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      node = number();
{if ("" != null) return node;}
      break;
      }
    case CHARACTER:{
      x = jj_consume_token(CHARACTER);
{if ("" != null) return new Node("character",x.image);}
      break;
      }
    case STRING:{
      x = jj_consume_token(STRING);
{if ("" != null) return new Node("string",x.image);}
      break;
      }
    case FALSE:
    case TRUE:{
      node = truth();
{if ("" != null) return node;}
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public Node break_stmt() throws ParseException {
    jj_consume_token(BREAK);
    jj_consume_token(SEMIC);
{if ("" != null) return new Node("break");}
    throw new Error("Missing return statement in function");
}

  static final public Node continue_stmt() throws ParseException {
    jj_consume_token(CONTINUE);
    jj_consume_token(SEMIC);
{if ("" != null) return new Node("continue");}
    throw new Error("Missing return statement in function");
}

  static final public Node return_stmt() throws ParseException {Node node=new Node("return");
    Node val;
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBR:
    case PLUS:
    case MINUS:
    case MULT:
    case INC:
    case DEC:
    case EXLM:
    case NOT:
    case AND:
    case FALSE:
    case TRUE:
    case IDENTIFIER:
    case INTEGER:
    case STRING:
    case CHARACTER:{
      val = expr();
node.addChildren(val);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(SEMIC);
{if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

  static final public Node expr() throws ParseException {Node node;
    Node lop=null;
    Node op=null;
    Node rop=null;
    if (jj_2_13(2147483647)) {
      lop = term();
      op = assign_op();
      rop = expr();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBR:
      case PLUS:
      case MINUS:
      case MULT:
      case INC:
      case DEC:
      case EXLM:
      case NOT:
      case AND:
      case FALSE:
      case TRUE:
      case IDENTIFIER:
      case INTEGER:
      case STRING:
      case CHARACTER:{
        node = expr10();
{if ("" != null) return node;}
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return new Node("expr").addChildren(lop,op,rop);}
    throw new Error("Missing return statement in function");
}

  static final public Node assign_op() throws ParseException {Token op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      op = jj_consume_token(ASSIGN);
      break;
      }
    case ADD_EQUAL:{
      op = jj_consume_token(ADD_EQUAL);
      break;
      }
    case MINUS_EQUAL:{
      op = jj_consume_token(MINUS_EQUAL);
      break;
      }
    case MULT_EQUAL:{
      op = jj_consume_token(MULT_EQUAL);
      break;
      }
    case DIV_EQUAL:{
      op = jj_consume_token(DIV_EQUAL);
      break;
      }
    case MOD_EQUAL:{
      op = jj_consume_token(MOD_EQUAL);
      break;
      }
    case AND_EQUAL:{
      op = jj_consume_token(AND_EQUAL);
      break;
      }
    case OR_EQUAL:{
      op = jj_consume_token(OR_EQUAL);
      break;
      }
    case XOR_EQUAL:{
      op = jj_consume_token(XOR_EQUAL);
      break;
      }
    case LEFT_MOVE_EQUAL:{
      op = jj_consume_token(LEFT_MOVE_EQUAL);
      break;
      }
    case RIGHT_MOVE_EQUAL:{
      op = jj_consume_token(RIGHT_MOVE_EQUAL);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Node(op.image);}
    throw new Error("Missing return statement in function");
}

  static final public Node expr10() throws ParseException {Node node;
    Node l=null;
    Node r=null;
    Token op=null;
    node = expr9();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case QUESTION:{
      op = jj_consume_token(QUESTION);
      l = expr();
      jj_consume_token(COLON);
      r = expr();
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      ;
    }
if(op==null){
            {if ("" != null) return node;}
        }else{
            {if ("" != null) return new Node(op.image,null,node,l,r);}
        }
    throw new Error("Missing return statement in function");
}

  static final public Node expr9() throws ParseException {Node node;
    Node op_node=null;
    Token op;
    node = expr8();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LOGIC_OR:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_6;
      }
      op = jj_consume_token(LOGIC_OR);
if(op_node==null){
                op_node=new Node(op.image,null,node);
            }else{
                op_node=new Node(op.image,null,op_node);
            }
      node = expr8();
op_node.addChildren(node);
    }
if(op_node==null){
            {if ("" != null) return node;}
        }else{
            {if ("" != null) return op_node;}
        }
    throw new Error("Missing return statement in function");
}

  static final public Node expr8() throws ParseException {Node node;
    Node op_node=null;
    Token op;
    node = expr7();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LOGIC_AND:{
        ;
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        break label_7;
      }
      op = jj_consume_token(LOGIC_AND);
if(op_node==null){
                op_node=new Node(op.image,null,node);
            }else{
                op_node=new Node(op.image,null,op_node);
            }
      node = expr7();
op_node.addChildren(node);
    }
if(op_node==null){
            {if ("" != null) return node;}
        }else{
            {if ("" != null) return op_node;}
        }
    throw new Error("Missing return statement in function");
}

  static final public Node expr7() throws ParseException {Node node;
    Node op_node=null;
    Token op;
    node = expr6();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LOGIC_EQUAL:
      case LOGIC_NOT:
      case LEFT:
      case RIGHT:
      case LEFT_EQUAL:
      case RIGHT_EQUAL:{
        ;
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RIGHT:{
        op = jj_consume_token(RIGHT);
        break;
        }
      case LEFT:{
        op = jj_consume_token(LEFT);
        break;
        }
      case RIGHT_EQUAL:{
        op = jj_consume_token(RIGHT_EQUAL);
        break;
        }
      case LEFT_EQUAL:{
        op = jj_consume_token(LEFT_EQUAL);
        break;
        }
      case LOGIC_EQUAL:{
        op = jj_consume_token(LOGIC_EQUAL);
        break;
        }
      case LOGIC_NOT:{
        op = jj_consume_token(LOGIC_NOT);
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
if(op_node==null){
                op_node=new Node(op.image,null,node);
            }else{
                op_node=new Node(op.image,null,op_node);
            }
      node = expr6();
op_node.addChildren(node);
    }
if(op_node==null){
            {if ("" != null) return node;}
        }else{
            {if ("" != null) return op_node;}
        }
    throw new Error("Missing return statement in function");
}

  static final public Node expr6() throws ParseException {Node node;
    Node op_node=null;
    Token op;
    node = expr5();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        break label_9;
      }
      op = jj_consume_token(OR);
if(op_node==null){
                op_node=new Node(op.image,null,node);
            }else{
                op_node=new Node(op.image,null,op_node);
            }
      node = expr5();
op_node.addChildren(node);
    }
if(op_node==null){
            {if ("" != null) return node;}
        }else{
            {if ("" != null) return op_node;}
        }
    throw new Error("Missing return statement in function");
}

  static final public Node expr5() throws ParseException {Node node;
    Node op_node=null;
    Token op;
    node = expr4();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case XOR:{
        ;
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        break label_10;
      }
      op = jj_consume_token(XOR);
if(op_node==null){
                op_node=new Node(op.image,null,node);
            }else{
                op_node=new Node(op.image,null,op_node);
            }
      node = expr4();
op_node.addChildren(node);
    }
if(op_node==null){
            {if ("" != null) return node;}
        }else{
            {if ("" != null) return op_node;}
        }
    throw new Error("Missing return statement in function");
}

  static final public Node expr4() throws ParseException {Node node;
    Node op_node=null;
    Token op;
    node = expr3();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        break label_11;
      }
      op = jj_consume_token(AND);
if(op_node==null){
                op_node=new Node(op.image,null,node);
            }else{
                op_node=new Node(op.image,null,op_node);
            }
      node = expr3();
op_node.addChildren(node);
    }
if(op_node==null){
            {if ("" != null) return node;}
        }else{
            {if ("" != null) return op_node;}
        }
    throw new Error("Missing return statement in function");
}

  static final public Node expr3() throws ParseException {Node node;
    Node op_node=null;
    Token op;
    node = expr2();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFT_MOVE:
      case RIGHT_MOVE:{
        ;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RIGHT_MOVE:{
        op = jj_consume_token(RIGHT_MOVE);
        break;
        }
      case LEFT_MOVE:{
        op = jj_consume_token(LEFT_MOVE);
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
if(op_node==null){
                op_node=new Node(op.image,null,node);
            }else{
                op_node=new Node(op.image,null,op_node);
            }
      node = expr2();
op_node.addChildren(node);
    }
if(op_node==null){
            {if ("" != null) return node;}
        }else{
            {if ("" != null) return op_node;}
        }
    throw new Error("Missing return statement in function");
}

  static final public Node expr2() throws ParseException {Node node;
    Node op_node=null;
    Token op;
    node = expr1();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        op = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        op = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
if(op_node==null){
                op_node=new Node(op.image,null,node);
            }else{
                op_node=new Node(op.image,null,op_node);
            }
      node = expr1();
op_node.addChildren(node);
    }
if(op_node==null){
            {if ("" != null) return node;}
        }else{
            {if ("" != null) return op_node;}
        }
    throw new Error("Missing return statement in function");
}

  static final public Node expr1() throws ParseException {Node node;
    Node op_node=null;
    Token op;
    node = term();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULT:
      case DIV:
      case MOD:{
        ;
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULT:{
        op = jj_consume_token(MULT);
        break;
        }
      case DIV:{
        op = jj_consume_token(DIV);
        break;
        }
      case MOD:{
        op = jj_consume_token(MOD);
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
if(op_node==null){
                op_node=new Node(op.image,null,node);
            }else{
                op_node=new Node(op.image,null,op_node);
            }
      node = term();
op_node.addChildren(node);
    }
if(op_node==null){
            {if ("" != null) return node;}
        }else{
            {if ("" != null) return op_node;}
        }
    throw new Error("Missing return statement in function");
}

  static final public Node number() throws ParseException {Token x;
    x = jj_consume_token(INTEGER);
{if ("" != null) return new Node("number",x.image);}
    throw new Error("Missing return statement in function");
}

  static final public Node truth() throws ParseException {Token x;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      x = jj_consume_token(TRUE);
      break;
      }
    case FALSE:{
      x = jj_consume_token(FALSE);
      break;
      }
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Node("truth",x.image);}
    throw new Error("Missing return statement in function");
}

  static final public Node primary() throws ParseException {Node node;
    Token x;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      node = number();
{if ("" != null) return node;}
      break;
      }
    case CHARACTER:{
      x = jj_consume_token(CHARACTER);
{if ("" != null) return new Node("character",x.image);}
      break;
      }
    case STRING:{
      x = jj_consume_token(STRING);
{if ("" != null) return new Node("string",x.image);}
      break;
      }
    case FALSE:
    case TRUE:{
      node = truth();
{if ("" != null) return node;}
      break;
      }
    case IDENTIFIER:{
      node = name();
{if ("" != null) return node;}
      break;
      }
    case LBR:{
      jj_consume_token(LBR);
      node = expr();
      jj_consume_token(RBR);
{if ("" != null) return node;}
      break;
      }
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public Node term() throws ParseException {Node node;
    Node temp;
    if (jj_2_14(2147483647)) {
      jj_consume_token(LBR);
      temp = type();
node=new Node("cast");
            node.addChildren(temp);
      jj_consume_token(RBR);
      temp = term();
node.addChildren(temp);
            {if ("" != null) return node;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBR:
      case PLUS:
      case MINUS:
      case MULT:
      case INC:
      case DEC:
      case EXLM:
      case NOT:
      case AND:
      case FALSE:
      case TRUE:
      case IDENTIFIER:
      case INTEGER:
      case STRING:
      case CHARACTER:{
        node = pre_op();
{if ("" != null) return node;}
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  static final public Node pre_op() throws ParseException {Node node;
    Token op=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INC:{
      op = jj_consume_token(INC);
      node = pre_op();
      break;
      }
    case DEC:{
      op = jj_consume_token(DEC);
      node = pre_op();
      break;
      }
    case PLUS:{
      op = jj_consume_token(PLUS);
      node = term();
      break;
      }
    case MINUS:{
      op = jj_consume_token(MINUS);
      node = term();
      break;
      }
    case EXLM:{
      op = jj_consume_token(EXLM);
      node = term();
      break;
      }
    case NOT:{
      op = jj_consume_token(NOT);
      node = term();
      break;
      }
    case MULT:{
      op = jj_consume_token(MULT);
      node = term();
      break;
      }
    case AND:{
      op = jj_consume_token(AND);
      node = term();
      break;
      }
    case LBR:
    case FALSE:
    case TRUE:
    case IDENTIFIER:
    case INTEGER:
    case STRING:
    case CHARACTER:{
      node = post_op();
{if ("" != null) return node;}
      break;
      }
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Node("preOp").addChildren(new Node(op.image),node);}
    throw new Error("Missing return statement in function");
}

  static final public Node post_op() throws ParseException {Node node=new Node("postOp");
    Token op=null;
    Node temp=null;
    temp = primary();
node.addChildren(temp);
        temp=null;
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBR:
      case INC:
      case DEC:{
        ;
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INC:{
        op = jj_consume_token(INC);
        break;
        }
      case DEC:{
        op = jj_consume_token(DEC);
        break;
        }
      case LBR:{
        jj_consume_token(LBR);
        temp = args();
        jj_consume_token(RBR);
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
if(temp!=null){
            {if ("" != null) return node.addChildren(temp);}
        }else if(op!=null){
            {if ("" != null) return node.addChildren(new Node(op.image));}
        }else{
            {if ("" != null) return node.simplify();}
        }
    throw new Error("Missing return statement in function");
}

  static final public Node args() throws ParseException {Node node=new Node("args");
    Node temp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBR:
    case PLUS:
    case MINUS:
    case MULT:
    case INC:
    case DEC:
    case EXLM:
    case NOT:
    case AND:
    case FALSE:
    case TRUE:
    case IDENTIFIER:
    case INTEGER:
    case STRING:
    case CHARACTER:{
      temp = expr();
node.addChildren(temp);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[51] = jj_gen;
          break label_16;
        }
        jj_consume_token(COMMA);
        temp = expr();
node.addChildren(temp);
      }
      break;
      }
    default:
      jj_la1[52] = jj_gen;
      ;
    }
{if ("" != null) return node.simplify();}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_3_6()
 {
    if (jj_scan_token(VOID)) return true;
    if (jj_scan_token(RBR)) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_scan_token(RBR)) return true;
    return false;
  }

  static private boolean jj_3R_47()
 {
    if (jj_scan_token(LOGIC_AND)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_73()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3R_69()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_43()
 {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_70()
 {
    if (jj_3R_72()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_73()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_66()
 {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_12()
 {
    if (jj_scan_token(LCBR)) return true;
    return false;
  }

  static private boolean jj_3R_63()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_11()
 {
    if (jj_scan_token(LCBR)) return true;
    return false;
  }

  static private boolean jj_3R_58()
 {
    if (jj_scan_token(LBR)) return true;
    if (jj_3R_63()) return true;
    if (jj_scan_token(RBR)) return true;
    return false;
  }

  static private boolean jj_3R_49()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_44()
 {
    if (jj_scan_token(LOGIC_OR)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3_10()
 {
    if (jj_scan_token(LCBR)) return true;
    return false;
  }

  static private boolean jj_3R_71()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3R_45()
 {
    if (jj_3R_48()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_32()
 {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_33()
 {
    if (jj_scan_token(QUESTION)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_67()
 {
    if (jj_3R_70()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_71()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_scan_token(LCBR)) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_42()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_41()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_40()
 {
    if (jj_scan_token(MULT)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_39()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_scan_token(LCBR)) return true;
    return false;
  }

  static private boolean jj_3R_38()
 {
    if (jj_scan_token(EXLM)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_30()
 {
    if (jj_3R_32()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_37()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_36()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_35()
 {
    if (jj_scan_token(DEC)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_34()
 {
    if (jj_scan_token(INC)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_68()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_29()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_14()
 {
    if (jj_scan_token(LBR)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_20()) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(LBR)) return true;
    return false;
  }

  static private boolean jj_3R_64()
 {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_28()
 {
    if (jj_scan_token(LBR)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(RBR)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  static private boolean jj_3_13()
 {
    if (jj_3R_23()) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_26()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (jj_3R_21()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_57()
 {
    if (jj_scan_token(LBR)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(RBR)) return true;
    return false;
  }

  static private boolean jj_3R_25()
 {
    if (jj_3R_23()) return true;
    if (jj_3R_24()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_56()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  static private boolean jj_3R_65()
 {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3R_55()
 {
    if (jj_3R_62()) return true;
    return false;
  }

  static private boolean jj_3R_59()
 {
    if (jj_3R_64()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_65()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_54()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_53()
 {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  static private boolean jj_3R_48()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_52()
 {
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static private boolean jj_3R_62()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    return false;
  }

  static private boolean jj_3R_60()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_50()
 {
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_61()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_17()) return true;
    if (jj_scan_token(SEMIC)) return true;
    return false;
  }

  static private boolean jj_3R_74()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    }
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_51()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    }
    }
    }
    }
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_72()
 {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_46()
 {
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public TempTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[53];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x7cf30400,0x400,0x100000,0x10000,0x0,0x0,0x0,0x0,0x0,0x100400,0x800,0x0,0x8000,0x800,0x8000,0x800,0x7cf30400,0x7cf30400,0x0,0x7cf30400,0x7cf30400,0x400,0x7ce20000,0x7ce20000,0x7cf30400,0x0,0x0,0x0,0x7ce20000,0x7ce20000,0x8000,0x4000,0x0,0x0,0x0,0x0,0x80000000,0x0,0x40000000,0x0,0x0,0x600000,0x600000,0x3800000,0x3800000,0x0,0x20000,0x7ce20000,0x7ce20000,0xc020000,0xc020000,0x800,0x7ce20000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0xdea00000,0x0,0x0,0x88200000,0x14800000,0x0,0x20,0x88200000,0x88200000,0x0,0x0,0x88200000,0x0,0x0,0x0,0x0,0xdea00000,0xdea00000,0x1000000,0xdea00000,0xdea00000,0x88200000,0x42000000,0x42000000,0xdea00000,0x0,0x0,0x42000000,0x42000000,0x42000000,0x1ff800,0x0,0x10,0x8,0x1e6,0x1e6,0x0,0x1,0x0,0x600,0x600,0x0,0x0,0x0,0x0,0x42000000,0x42000000,0x42000000,0x42000000,0x0,0x0,0x0,0x42000000,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x10879cf,0x0,0x0,0x80047,0x1988,0x30,0x80000,0x80007,0x80007,0x0,0x0,0x80007,0x0,0x0,0x0,0x0,0x10879cf,0x10879cf,0x0,0x10879cf,0x10879cf,0x82007,0x1086000,0x1086000,0x10879cf,0x200,0x400,0x1084000,0x1086000,0x1086000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1086000,0x1086000,0x1086000,0x0,0x0,0x0,0x1086000,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[14];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Temp(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Temp(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new TempTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 53; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 53; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Temp(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new TempTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 53; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new TempTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 53; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Temp(TempTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 53; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TempTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 53; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[90];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 53; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 90; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 14; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
